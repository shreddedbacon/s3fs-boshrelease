---

groups:
  - name: '((pipeline.name))'
    jobs:
      - test-release
      - bump-rc
      - promote-release
      - bump-major
      - bump-minor

jobs:
  - name: test-release
    public: true
    serial: true
    plan:
    - do:
      - aggregate:
        - get: bosh-release
          trigger: true
        - get: version
        - get: bosh-stemcell
          trigger: true
      - task: test-release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: concourse/bosh-cli}
          inputs:
            - { name: bosh-release }
            - { name: version }
            - { name: bosh-stemcell }
          run:
            path: ./bosh-release/ci/scripts/testrelease
            args: []
          params:
            VERSION_FROM: version/number
            BOSH_TARGET:     ((bosh.target))
            BOSH_USERNAME:   ((bosh.username))
            BOSH_PASSWORD:   ((bosh.password))
            BOSH_DEPLOYMENT: ((bosh.deployment))
            BOSH_CA_CERT: ((bosh.ca_cert))
#            TEST_ERRAND: ((bosh.test-errand))
#      on_success:
#        put: notify
#        params:
#          channe: ((slack.channel))
#          text: '((pipeline.name)): testflight success!'
#      on_failure:
#        put: notify
#        params:
#          channel:  ((slack.channel))
#          text:    '((pipeline.name)): testflight failed :('

  - name: bump-rc
    public: true
    plan:
    - do:
      - aggregate:
          - { get: bosh-release,     trigger: true,  passed: [test-release] }
          - { get: version, trigger: true, params: {pre: rc} }
      - put: version
        params: {file: version/number}
      on_failure:
        put: notify
        params:
          channel:  ((slack.channel))
          text:    '((pipeline.name)) : rc job failed '

  - name: bump-minor
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }
      on_failure:
        put: notify
        params:
          channel:  ((slack.channel))
          text:    '((pipeline.name)) : minor job failed'

  - name: bump-major
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }
      on_failure:
        put: notify
        params:
          channel:  ((slack.channel))
          text:    '((pipeline.name)) : major job failed'

  - name: promote-release
    public: true
    serial: true
    plan:
    - do:
      - name: inputs
        aggregate:
          - { get: version, passed: [bump-rc], params: {bump: final} }
          - { get: bosh-release,     passed: [bump-rc] }
      - name: release
        task: release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: concourse/bosh-cli}
          inputs:
            - name: version
            - name: bosh-release
          outputs:
            - name: gh
            - name: pushme
          run:
            path: ./bosh-release/ci/scripts/cutrelease
            args: []
          params:
            VERSION_FROM: version/number
            RELEASE_NAME: "((release)) BOSH Release"
            RELEASE_NAME2: ((release))
            BRANCH:       ((github.branch))
            BOSH_TARGET:     ((bosh.target))
            BOSH_USERNAME:   ((bosh.username))
            BOSH_PASSWORD:   ((bosh.password))
            BOSH_DEPLOYMENT: ((bosh.deployment))
            BOSH_CA_CERT: ((bosh.ca_cert))
            AWS_BUCKET: ((aws.bucket))
            AWS_ACCESS_KEY:       ((aws.access_key))
            AWS_SECRET_KEY:       ((aws.secret_key))

      - name: upload-git
        put: bosh-release
        params:
          rebase: true
          repository: pushme/bosh-release
      - name: tarball
        put: blobstore
        params:
          file:  "gh/artifacts/((name))-*.tgz"
      - name: github-release
        put: github-release
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
      - name: version-bump
        put: version
        params:
          bump: patch
#      on_success:
#        put: notify
#        params:
#          channel: ((slack.channel))
#          text: '((pipeline.name)): new release'
#      on_failure:
#        put: notify
#        params:
#          channel:  ((slack.channel))
#          text:    '((pipeline.name)): shipit job failed'


resource_types:
  - name: bosh-deployment
    type: docker-image
    source:
      repository: cloudfoundry/bosh-deployment-resource

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: bosh-release
    type: git
    source:
      uri:         ((github.uri))
      branch:      ((github.branch))
      private_key: ((github.private_key))

  - name: version
    type: semver
    source :
      driver:            s3
      bucket:            ((aws.bucket))
      key:               version
      access_key_id:     ((aws.access_key))
      secret_access_key: ((aws.secret_key))
      initial_version:   ((initial_version))
      region_name: ((aws.region))
      endpoint: ((aws.endpoint))

  - name: notify
    type: slack-notification
    source:
      url: ((slack.webhook))

  - name: github-release
    type: github-release
    source:
      user:         ((github.owner))
      repository:   ((github.repo))
      access_token: ((github.access_token))

  - name: blobstore
    type: s3
    source:
      bucket:            ((aws.bucket))
      regexp:            "((name))-(.*).tgz"
      access_key_id:     ((aws.access_key))
      secret_access_key: ((aws.secret_key))
      region_name: ((aws.region))
      endpoint: ((aws.endpoint))

  - name: bosh-stemcell
    type: bosh-io-stemcell
    source:
      name: bosh-warden-boshlite-ubuntu-trusty-go_agent

